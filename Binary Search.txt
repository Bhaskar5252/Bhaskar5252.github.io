import sys

def optimal_bst(keys, p, q, n):
    # Create tables for cost and root
    e = [[0 for _ in range(n+2)] for _ in range(n+2)]  # Cost table
    w = [[0 for _ in range(n+2)] for _ in range(n+2)]  # Weight table
    root = [[0 for _ in range(n+1)] for _ in range(n+1)]  # Root table

    # Initialization
    for i in range(n+1):
        e[i][i] = q[i]
        w[i][i] = q[i]

    # DP to fill tables
    for l in range(1, n+1):  # l = length of subtree
        for i in range(n - l + 1):
            j = i + l
            e[i][j] = sys.maxsize
            w[i][j] = w[i][j-1] + p[j-1] + q[j]

            for r in range(i+1, j+1):  # Possible roots
                cost = e[i][r-1] + e[r][j] + w[i][j]
                if cost < e[i][j]:
                    e[i][j] = cost
                    root[i][j-1] = r

    return e, root

# Example usage:
if _name_ == "_main_":
    keys = [10, 20, 30]       # Sorted keys
    p = [0.3, 0.2, 0.5]       # Probabilities of successful searches
    q = [0.1, 0.1, 0.1, 0.1]  # Probabilities of unsuccessful searches

    n = len(keys)
    e, root = optimal_bst(keys, p, q, n)

    print("Minimum expected cost:", e[0][n])
    print("Root table:")
    for row in root:
        print(row)